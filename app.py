import streamlit as st
import pandas as pd
from utils import general_temp_city, main, fetch_data, get_curr_season
import time
import asyncio
import requests
import plotly.graph_objs as go
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º", layout="wide")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üå§Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –∏ –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])
API_key = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –æ—Ç OpenWeatherMap")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    cities = df['city'].unique()

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    start = time.time()
    for city in cities:
        general_temp_city(df, city)
    end = time.time()
    st.success(f'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–æ {end - start:.4f} —Å–µ–∫')

    # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    start = time.time()
    result = asyncio.run(main(df, cities))
    end = time.time()
    st.success(f'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–æ {end - start:.4f} —Å–µ–∫')

    # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Å–æ–±–æ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    # –î—É–º–∞—é, –Ω–∞ –±–û–ª—å—à–µ–º –æ–±—ä–µ–º–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ã–ª –±—ã –∑–∞–º–µ—Ç–Ω–µ–µ

    option_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", cities, index=None, placeholder="–í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞...")

    if st.sidebar.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        if option_city and API_key:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(f"https://api.openweathermap.org/data/2.5/weather?q={option_city}&appid={API_key}")

            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
            response = asyncio.run(fetch_data(f"https://api.openweathermap.org/data/2.5/weather?q={option_city}&appid={API_key}"))

            # –î—É–º–∞—é, –æ—Å–æ–±–æ–π —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ
            # –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            # –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ú—ã –ª–∏—à—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å.

            if response['cod'] == 200:
                curr_temp = float(response['main']['temp']) - 273.15

                selected_result = list(filter(lambda x: x[0] == option_city, result))[0]
                selected_df = selected_result[1]

                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
                st.subheader(f'–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ {option_city}')

                fig = go.Figure()
                fig.add_trace(go.Scatter(x=selected_df['timestamp'], 
                                          y=selected_df['temperature_win'], 
                                          mode='lines', 
                                          marker=dict(color='blue', size=5), 
                                          name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'))

                outliers = selected_df[selected_df['is_outlier'] == 1]
                fig.add_trace(go.Scatter(x=outliers['timestamp'], 
                                          y=outliers['temperature_win'], 
                                          mode='markers',
                                          marker=dict(color='red', size=10, symbol='x'), 
                                          name='–ê–Ω–æ–º–∞–ª–∏–∏'))

                fig.add_trace(go.Scatter(x=selected_df['timestamp'], 
                                          y=selected_df['y_pred'], 
                                          mode='lines', 
                                          line=dict(color='green', width=3, dash='dash'), 
                                          name='–õ–∏–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞'))

                fig.update_layout(xaxis_title='–î–∞—Ç–∞',
                                  yaxis_title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                                  xaxis=dict(rangeslider=dict(visible=True)),
                                  showlegend=True)
                st.plotly_chart(fig)

                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
                st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä")
                
                col1, col2, col3, col4 = st.columns(4)

                with col1:
                    st.metric(label="–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{round(selected_result[3], 2)} ¬∞C", delta=None)
                
                with col2:
                    st.metric(label="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{round(selected_result[4], 2)} ¬∞C", delta=None)

                with col3:
                    st.metric(label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{round(selected_result[5], 2)} ¬∞C", delta=None)

                with col4:
                    st.metric(label="–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{round(curr_temp, 2)} ¬∞C", delta=None)

                season = selected_result[2]
                season_name = get_curr_season(datetime.now().month)
                if season['median'][season_name] - 1.5 * season['std'][season_name] <= curr_temp <= season['median'][season_name] + 1.5 * season['std'][season_name]:
                    st.success('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–π')
                else:
                    st.error('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–π')
            else:
                st.error(response['message'])

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∑–∞ —Å–µ–∑–æ–Ω
            st.subheader(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –∑–∞ —Å–µ–∑–æ–Ω {season_name} –¥–ª—è {option_city}")
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            temperatures = selected_df[selected_df['season'] == season_name]['temperature']
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
            fig_dist = go.Figure()
            
            fig_dist.add_trace(go.Histogram(
                x=temperatures,
                name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã',
                marker_color='blue',
                opacity=0.7,
                histnorm='probability density',
                
            ))

            fig_dist.add_trace(go.Scatter(
                x=[season['median'][season_name] - 1.5 * season['std'][season_name], 
                   season['median'][season_name] - 1.5 * season['std'][season_name]],
                y=[0.1, 0],
                mode='lines',
                line=dict(color='red', width=3),
                name='–ú–µ–¥–∏–∞–Ω–∞ - 1.5 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'
            ))

            fig_dist.add_trace(go.Scatter(
                x=[season['median'][season_name] + 1.5 * season['std'][season_name], 
                   season['median'][season_name] + 1.5 * season['std'][season_name]],
                y=[0.1, 0],
                mode='lines',
                line=dict(color='red', width=3),
                name='–ú–µ–¥–∏–∞–Ω–∞ + 1.5 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ'
            ))

            fig_dist.add_trace(go.Scatter(
                x=[season['median'][season_name]],
                y=[0],
                mode='markers',
                marker=dict(color='green', size=10),
                name='–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'
            ))

            fig_dist.add_trace(go.Scatter(
                x=[curr_temp],
                y=[0],
                mode='markers',
                marker=dict(color='orange', size=10),
                name='–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'
            ))

            fig_dist.update_layout(xaxis_title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                                    yaxis_title='–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏',
                                    showlegend=True)

            st.plotly_chart(fig_dist)
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á.")
